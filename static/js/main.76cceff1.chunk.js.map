{"version":3,"sources":["calendars/ReactCalendar.jsx","calendars/RCCalendar.jsx","calendars/Y0CReactDatePicker.jsx","calendars/ReactDaterangePicker.jsx","App.js","serviceWorker.js","index.js"],"names":["ReactCalendar","state","date","Date","_this2","this","react_default","a","createElement","react","entry_default","onChange","console","log","setState","activeStartDate","value","selectRange","Component","RCCalendar","RangeCalendar_default","Y0CReactDatePicker","lib","multiple","range","DateRangePicker_default","numberOfCalendars","onSelect","singleDateRange","App","className","href","target","ReactCalendar_ReactCalendar","RCCalendar_RCCalendar","Y0CReactDatePicker_Y0CReactDatePicker","ReactDaterangePicker_ReactCalendar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAGqBA,6MACjBC,MAAQ,CACJC,KAAM,CAAC,IAAIC,KAAK,KAAM,EAAG,IAAK,IAAIA,KAAK,KAAM,EAAG,8EAG3C,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACIH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACII,SAAU,SAAAT,GACNU,QAAQC,IAAI,wBAAyBX,GACrCE,EAAKU,SAAS,CAACZ,UAEnBa,gBAAiBV,KAAKJ,MAAMC,KAAK,GACjCc,MAAOX,KAAKJ,MAAMC,KAClBe,aAAW,IAEfX,EAAAC,EAAAC,cAAA,2kBAjB2BU,8BCCtBC,qNACnBlB,MAAQ,CACNC,KAAM,IAAIC,8EAIV,OACEG,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACY,EAAAb,EAAD,MACAD,EAAAC,EAAAC,cAAA,sgBATgCU,sBCAnBG,qNACnBpB,MAAQ,CACNC,KAAM,CAAC,IAAIC,KAAQ,IAAIA,KAAK,KAAM,EAAG,8EAIrC,OACEG,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACc,EAAA,gBAAD,CAAiBC,UAAQ,IACzBjB,EAAAC,EAAAC,cAAA,ytBATwCU,gCCA3BlB,qNACnBC,MAAQ,CACNuB,MAAO,8EAGA,IAAApB,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,kBAAmB,EACnBV,MAAOX,KAAKJ,MAAMuB,MAClBG,SAAU,SAAAH,GACRpB,EAAKU,SAAS,CACZU,WAGJI,iBAAe,IAEjBtB,EAAAC,EAAAC,cAAA,8pBAlBmCU,cCwD5BW,mLAnDX,OACEvB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACbxB,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACEuB,KAAK,8CACLC,OAAO,UAFT,mBAOF1B,EAAAC,EAAAC,cAACyB,EAAD,OAEF3B,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACEuB,KAAK,8CACLC,OAAO,UAFT,gBAOF1B,EAAAC,EAAAC,cAAC0B,EAAD,OAEF5B,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACEuB,KAAK,0CACLC,OAAO,UAFT,0BAOF1B,EAAAC,EAAAC,cAAC2B,EAAD,OAEF7B,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KACEuB,KAAK,wDACLC,OAAO,UAFT,2BAOF1B,EAAAC,EAAAC,cAAC4B,EAAD,eA9CQlB,aCKEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.76cceff1.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport ReactCalendarComponent from 'react-calendar';\n\nexport default class ReactCalendar extends Component {\n    state = {\n        date: [new Date(2019, 2, 12), new Date(2019, 2, 15)]\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <ReactCalendarComponent\n                    onChange={date => {\n                        console.log('react-calendar value:', date);\n                        this.setState({date});\n                    }}\n                    activeStartDate={this.state.date[0]}\n                    value={this.state.date}\n                    selectRange\n                />\n                <p>простой, много настроек, не нужен момент, можно стилизовать, диапазон в одном календаре, диапазон из одной даты</p>\n            </Fragment>\n        )\n    }\n}","import React, {Component, Fragment} from 'react';\nimport CalendarComponent from 'rc-calendar/lib/RangeCalendar';\nimport 'rc-calendar/assets/index.css';\n\nexport default class RCCalendar extends Component {\n  state = {\n    date: new Date()\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <CalendarComponent />\n        <p>две панели для диапазона, можно стилизовать, выбор года и месяца отдельно, диапазон из одной даты</p>\n      </Fragment>\n    )\n  }\n}","import React, {Component, Fragment} from 'react';\nimport { RangeDatePicker } from '@y0c/react-datepicker';\nimport '@y0c/react-datepicker/assets/styles/calendar.scss';\n\nexport default class Y0CReactDatePicker extends Component {\n  state = {\n    date: [new Date(), new Date(2019, 2, 15)]\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <RangeDatePicker multiple/>\n        <p>\n          нужен node-sass, нужен момент, можно стилизовать, две панели, поле с попапом из коробки,\n          выбор нескольких дат, нельзя выбрать диапазон из одной даты\n        </p>\n      </Fragment>\n    )\n  }\n}","import React, {Component, Fragment} from 'react';\nimport CalendarComponent from 'react-daterange-picker';\nimport 'react-daterange-picker/dist/css/react-calendar.css'\n\nexport default class ReactCalendar extends Component {\n  state = {\n    range: null,\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <CalendarComponent\n          numberOfCalendars={3}\n          value={this.state.range}\n          onSelect={range => {\n            this.setState({\n              range,\n            })\n          }}\n          singleDateRange\n        />\n        <p>\n          нужен moment-range, только диапазон, можно выбрать один день в качестве диапазона, можно стилизовать,\n          настраиваемое количество панелей\n        </p>\n      </Fragment>\n    )\n  }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport ReactCalendar from './calendars/ReactCalendar';\nimport RCCalendar from './calendars/RCCalendar'\nimport Y0CReactDatePicker from './calendars/Y0CReactDatePicker'\nimport ReactDaterangePicker from './calendars/ReactDaterangePicker'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <section>\n          <h3>\n            <a\n              href=\"https://github.com/wojtekmaj/react-calendar\"\n              target=\"_blank\"\n            >\n              react-calendar\n            </a>\n          </h3>\n          <ReactCalendar/>\n        </section>\n        <section>\n          <h3>\n            <a\n              href=\"https://github.com/react-component/calendar\"\n              target=\"_blank\"\n            >\n              rc-calendar\n            </a>\n          </h3>\n          <RCCalendar />\n        </section>\n        <section>\n          <h3>\n            <a\n              href=\"https://github.com/y0c/react-datepicker\"\n              target=\"_blank\"\n            >\n              @y0c/react-datepicker\n            </a>\n          </h3>\n          <Y0CReactDatePicker />\n        </section>\n        <section>\n          <h3>\n            <a\n              href=\"https://github.com/onefinestay/react-daterange-picker\"\n              target=\"_blank\"\n            >\n              react-daterange-picker\n            </a>\n          </h3>\n          <ReactDaterangePicker />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}